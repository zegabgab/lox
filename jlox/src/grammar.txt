program        -> declaration* EOF ;
declaration    -> funDeclaration | varDeclaration | classDecl | statement ;
funDeclaration -> "fun" function ;
classDecl      -> "class" IDENTIFIER "{" function* "}" ;
function       -> IDENTIFIER "(" parameters? ")" block ;
parameters     -> IDENTIFIER ( "," IDENTIFIER )* ;
varDeclaration -> "var" IDENTIFIER ( "=" expression)? ";" ;
statement      -> returnStmt | printStmt | exprStmt | block | if | while | for ;
returnStmt     -> "return" expression? ";" ;
printStmt      -> "print" expression ";" ;
exprStmt       -> expression ";" ;
block          -> "{" declaration* "}" ;
if             -> "if" "(" expression ")" statement ( "else" statement )? ;
while          -> "while" "(" expression ")" statement ;
for            -> "for" "(" ( varDeclaration | exprStmt | ";" ) expression? ";" expression? ")" statement ;

expression     -> assignment ;
assignment     -> ( call "." )? IDENTIFIER "=" assignment | or ;
or             -> and ( "or" and )* ;
and            -> equality ( "and" equality)* ;
equality       -> comparison ( ( "==" | "!=" ) comparison )* ;
comparison     -> term ( ( "<" | "<=" | ">" | ">=" ) term )* ;
term           -> factor ( ( "+"  | "-" ) factor )* ;
factor         -> unary ( ( "*" | "/" ) unary )* ;
unary          -> ( "!" | "-" ) unary
                | call ;
call           -> primary ( "(" arguments? ")" | "." IDENTIFIER )* ;
arguments      -> expression ( "," expression )* ;
primary        -> "(" expression ")"
                | NUMBER | STRING | IDENTIFIER | "true" | "false" | "nil" ;